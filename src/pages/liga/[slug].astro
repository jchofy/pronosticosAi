---
// @ts-nocheck
import Base from '../../layouts/Base.astro';
import MatchCard from '../../components/MatchCard.astro';
import { getLeagueBySlug } from '../../lib/leagues.js';
import { getUpcomingMatchesByLeague, getRecentMatchesByLeague } from '../../lib/matches.js';
import { metaBasic } from '../../lib/seo.js';
import { SITE_URL } from '../../lib/env.js';

const { slug } = Astro.params;
/** @type {any} */
let league = null;
/** @type {any[]} */
let upcoming = [];
/** @type {{ rows: any[]; page: number; pageSize: number; hasNext: boolean }} */
let recent = { rows: [], page: 1, pageSize: 50, hasNext: false };
/** @type {string|null} */
let error = null;

try {
  league = await getLeagueBySlug(slug);
  if (!league) throw new Error('League not found');
  upcoming = await getUpcomingMatchesByLeague(slug);
  recent = await getRecentMatchesByLeague(slug, 30, 1, 50);
} catch (e) {
  error = 'Service unavailable';
  Astro.response.status = 503;
}

const siteUrl = SITE_URL;
const pageTitle = league ? `${league.name} (${league.country})` : 'Liga';
const meta = metaBasic(pageTitle, `Partidos de ${league?.name || ''} en ${league?.country || ''}. Próximos y recientes.`, `${siteUrl}/liga/${slug}`);

const fmtDateTime = (s) => new Date(s).toLocaleString('es-ES', { dateStyle: 'medium', timeStyle: 'short' });
---
<Base { ...meta }>
  <h1 class="text-3xl md:text-4xl font-extrabold tracking-tight mb-6">{league ? league.name : 'Liga'}</h1>

  { error ? (
    <div class="card p-6 text-red-600">{error}</div>
  ) : (
    <>
      <section class="mb-8">
        <h2 class="text-xl font-bold mb-3">Próximos partidos</h2>
        {upcoming.length === 0 ? (
          <p class="text-sm text-gray-600">No hay partidos próximos.</p>
        ) : (
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {upcoming.map((m) => (<MatchCard match={m} />))}
          </div>
        )}
      </section>
    </>
  )}
</Base> 