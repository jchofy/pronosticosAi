---
// @ts-nocheck
import Base from '../layouts/Base.astro';
import { getSession } from 'auth-astro/server';
import { metaBasic } from '../lib/seo.js';
import { SITE_URL } from '../lib/env.js';
import { getStripeProducts, formatPrice, getIntervalText, getPlanType, sortProducts } from '../lib/stripe-products.js';
import { getUserSubscriptionPlan, getUserIdFromEmail } from '../lib/subscription-limits.js';

const session = await getSession(Astro.request);
const isLoggedIn = !!session?.user;

// Obtener suscripción actual del usuario
let currentSubscription = null;
if (isLoggedIn && session.user.email) {
  const userId = await getUserIdFromEmail(session.user.email);
  if (userId) {
    currentSubscription = await getUserSubscriptionPlan(userId);
  }
}

// Obtener productos de Stripe
let stripeProducts = { subscriptions: [], oneTime: [] };
let error = null;

try {
  stripeProducts = await getStripeProducts();
  stripeProducts.subscriptions = sortProducts(stripeProducts.subscriptions);
  stripeProducts.oneTime = sortProducts(stripeProducts.oneTime);
} catch (e) {
  console.error('Error loading Stripe products:', e);
  error = 'No se pudieron cargar los productos. Inténtalo más tarde.';
}

const siteUrl = SITE_URL;
const meta = metaBasic(
  'Planes y Precios - PronosticosAI',
  'Accede a nuestras predicciones con IA. Planes flexibles o compra partidos individuales.',
  `${siteUrl}/precios`
);

// Función para obtener las características del producto según su tipo
function getProductFeatures(planType) {
  const features = {
    '2day': [
      '2 pronósticos al día',
      'Análisis detallado con IA',
      'Predicciones de alta calidad'
    ],
    '5day': [
      '5 pronósticos al día',
      'Análisis detallado con IA',
      'Predicciones de alta calidad',
      'Mejor relación calidad-precio'
    ],
    'unlimited': [
      'Acceso ilimitado a todos los partidos',
      'Análisis detallado con IA',
      'Predicciones de alta calidad',
      'Soporte prioritario'
    ],
    'match': [
      'Predicción completa del partido',
      'Análisis detallado con IA',
      'Sin compromiso'
    ]
  };
  
  return features[planType] || ['Acceso a predicciones', 'Análisis con IA'];
}

function getProductBadge(planType) {
  const badges = {
    '2day': 'Ideal para empezar',
    '5day': 'Más partidos, mejor precio',
    'unlimited': 'Acceso total',
    'match': 'por partido'
  };
  
  return badges[planType] || '';
}

function isPopular(planType) {
  return planType === '5day';
}

// Función para determinar si el usuario ya tiene este plan
function hasCurrentPlan(planType, currentSubscription) {
  if (!currentSubscription) return false;
  
  // Mapear entre tipos de plan y stripe_price_id
  const planMapping = {
    '2day': process.env.STRIPE_PRICE_SUB_2DAY,
    '5day': process.env.STRIPE_PRICE_SUB_5DAY,
    'unlimited': process.env.STRIPE_PRICE_SUB_UNLIMITED,
  };
  
  return planMapping[planType] === currentSubscription.stripe_price_id;
}
---

<Base { ...meta }>
  <!-- Hero Section -->
  <section class="mb-10 md:mb-14">
    <div class="relative overflow-hidden rounded-2xl border border-gray-200 bg-white p-6 md:p-10 shadow-sm">
      <div class="text-center max-w-3xl mx-auto">
        <div class="inline-flex items-center gap-2 rounded-full bg-brand-50 px-3 py-1 text-[11px] font-semibold text-brand-800 border border-brand-100 mb-4">
          Planes y precios
        </div>
        <h1 class="text-3xl md:text-5xl font-extrabold tracking-tight leading-tight">
          <span class="text-gradient-brand">Accede a nuestras predicciones</span>
        </h1>
        <p class="mt-4 text-sm md:text-base text-gray-600 max-w-2xl mx-auto">
          Elige el plan que mejor se adapte a tus necesidades. Desde predicciones individuales hasta acceso completo a todas nuestras predicciones con IA.
        </p>
      </div>
      <div class="pointer-events-none absolute -right-32 -top-32 h-64 w-64 rounded-full bg-brand-100 opacity-40 blur-3xl"></div>
      <div class="pointer-events-none absolute -left-20 -bottom-24 h-64 w-64 rounded-full bg-blue-100 opacity-40 blur-3xl"></div>
    </div>
  </section>

  <!-- Pricing Cards -->
  <section class="mb-10 md:mb-14">
    {error ? (
      <div class="card p-6 text-red-600 text-center">
        <p>{error}</p>
      </div>
    ) : (
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        {stripeProducts.subscriptions.map((product) => {
          const planType = getPlanType(product);
          const isPopularPlan = isPopular(planType);
          const features = getProductFeatures(planType);
          const badge = getProductBadge(planType);
          const price = product.prices[0]; // Tomar el primer precio
          const userHasThisPlan = hasCurrentPlan(planType, currentSubscription);
          const userHasAnyPlan = !!currentSubscription;
          
          return (
            <div class={`card p-6 transition-all duration-300 ${
              userHasThisPlan 
                ? 'border-2 border-green-500 bg-green-50' 
                : userHasAnyPlan 
                  ? 'border border-gray-300 bg-gray-50 opacity-60' 
                  : isPopularPlan 
                    ? 'border-2 border-brand-600 relative hover:shadow-lg' 
                    : 'hover:shadow-lg'
            }`}>
              {isPopularPlan && !userHasAnyPlan && (
                <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <div class="bg-brand-600 text-white px-4 py-1 rounded-full text-xs font-semibold">
                    MÁS POPULAR
                  </div>
                </div>
              )}
              
              {userHasThisPlan && (
                <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <div class="bg-green-600 text-white px-4 py-1 rounded-full text-xs font-semibold">
                    PLAN ACTUAL
                  </div>
                </div>
              )}
              
              <div class="text-center">
                <h3 class={`text-xl font-bold mb-2 ${userHasThisPlan ? 'text-green-900' : userHasAnyPlan ? 'text-gray-500' : 'text-gray-900'}`}>
                  {product.name}
                </h3>
                <div class={`text-3xl font-extrabold mb-1 ${userHasThisPlan ? 'text-green-900' : userHasAnyPlan ? 'text-gray-500' : 'text-gray-900'}`}>
                  {formatPrice(price.amount, price.currency)}
                </div>
                {badge && (
                  <p class={`text-sm mb-6 ${userHasThisPlan ? 'text-green-700' : userHasAnyPlan ? 'text-gray-400' : 'text-gray-600'}`}>
                    {badge}
                  </p>
                )}
                {price.interval && price.type === 'recurring' && planType !== 'match' && (
                  <p class={`text-xs mb-4 ${userHasThisPlan ? 'text-green-600' : userHasAnyPlan ? 'text-gray-400' : 'text-gray-500'}`}>
                    por {getIntervalText(price.interval, price.intervalCount)}
                  </p>
                )}
              </div>
              
              <ul class="space-y-3 mb-6">
                {features.map((feature) => (
                  <li class={`flex items-center text-sm ${userHasThisPlan ? 'text-green-800' : userHasAnyPlan ? 'text-gray-500' : 'text-gray-700'}`}>
                    <svg class={`w-5 h-5 mr-3 shrink-0 ${userHasThisPlan ? 'text-green-500' : userHasAnyPlan ? 'text-gray-400' : 'text-emerald-500'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    {feature}
                  </li>
                ))}
              </ul>
              
              {planType === 'match' ? (
                <a href="/proximos" class="btn-secondary w-full">Ver próximos partidos</a>
              ) : userHasThisPlan ? (
                <button class="w-full py-2 px-4 rounded-lg bg-green-600 text-white font-semibold cursor-default">
                  Estoy suscrito
                </button>
              ) : userHasAnyPlan ? (
                <button class="w-full py-2 px-4 rounded-lg bg-gray-400 text-gray-600 font-semibold cursor-not-allowed" disabled>
                  Suscribirse
                </button>
              ) : (
                <button
                  data-plan={planType}
                  data-price-id={price.id}
                  class="btn-primary w-full subscribe-btn"
                >
                  {isLoggedIn ? 'Suscribirse' : 'Iniciar sesión'}
                </button>
              )}
            </div>
          );
        })}
      </div>
    )}
  </section>

  <!-- Individual Purchase Section -->
  {stripeProducts.oneTime.length > 0 && (
    <section class="mb-10 md:mb-14">
      <div class="card p-6 md:p-8">
        <div class="text-center mb-6">
          <h2 class="text-xl md:text-2xl font-extrabold tracking-tight text-gray-900 mb-2">
            ¿Prefieres comprar partidos individuales?
          </h2>
          <p class="text-sm md:text-base text-gray-600">
            También puedes acceder a predicciones específicas por partido
          </p>
        </div>
        
        <div class="grid gap-4 max-w-2xl mx-auto">
          {stripeProducts.oneTime.map((product) => {
            const planType = getPlanType(product);
            const features = getProductFeatures(planType);
            const price = product.prices[0];
            const badge = getProductBadge(planType);
            
            return (
              <div class="rounded-xl border border-gray-200 bg-white p-6">
                <div class="text-center mb-4">
                  <h3 class="text-lg font-semibold text-gray-900 mb-2">{product.name}</h3>
                  <div class="text-2xl font-bold text-gray-900">
                    {formatPrice(price.amount, price.currency)}
                  </div>
                  {badge && (
                    <p class="text-sm text-gray-600">{badge}</p>
                  )}
                  {price.interval && price.type === 'recurring' && planType !== 'match' && (
                    <p class="text-xs text-gray-500">
                      por {getIntervalText(price.interval, price.intervalCount)}
                    </p>
                  )}
                </div>
                <ul class="space-y-2 mb-4 text-sm">
                  {features.map((feature) => (
                    <li class="flex items-center">
                      <svg class="w-4 h-4 text-emerald-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                      {feature}
                    </li>
                  ))}
                </ul>
                <a href="/proximos" class="btn-secondary w-full">Ver próximos partidos</a>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  )}

  <!-- Features Section -->
  <section class="mb-10 md:mb-14">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="card p-5">
        <div class="h-10 w-10 rounded-lg bg-blue-50 text-blue-700 grid place-items-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-5 w-5">
            <path d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456z"/>
          </svg>
        </div>
        <h3 class="font-semibold">Predicciones con IA</h3>
        <p class="mt-1 text-sm text-gray-600">Algoritmos avanzados analizan estadísticas y probabilidades para ofrecerte las mejores predicciones.</p>
      </div>
      <div class="card p-5">
        <div class="h-10 w-10 rounded-lg bg-emerald-50 text-emerald-700 grid place-items-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-5 w-5">
            <path d="M12 15a3 3 0 100-6 3 3 0 000 6z"/>
            <path fill-rule="evenodd" d="M1.323 11.447C2.811 6.976 7.028 3.75 12.001 3.75c4.97 0 9.185 3.223 10.675 7.69.12.362.12.752 0 1.113-1.487 4.471-5.705 7.697-10.677 7.697-4.97 0-9.186-3.223-10.675-7.69a1.762 1.762 0 010-1.113zM17.25 12a5.25 5.25 0 11-10.5 0 5.25 5.25 0 0110.5 0z" clip-rule="evenodd"/>
          </svg>
        </div>
        <h3 class="font-semibold">Análisis detallado</h3>
        <p class="mt-1 text-sm text-gray-600">Cada predicción incluye análisis completo de equipos, estadísticas y factores clave del partido.</p>
      </div>
      <div class="card p-5">
        <div class="h-10 w-10 rounded-lg bg-amber-50 text-amber-700 grid place-items-center mb-3">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-5 w-5">
            <path fill-rule="evenodd" d="M12 1.5a5.25 5.25 0 00-5.25 5.25v3a3 3 0 00-3 3v6.75a3 3 0 003 3h10.5a3 3 0 003-3v-6.75a3 3 0 00-3-3v-3c0-2.9-2.35-5.25-5.25-5.25zm3.75 8.25v-3a3.75 3.75 0 10-7.5 0v3h7.5z" clip-rule="evenodd"/>
          </svg>
        </div>
        <h3 class="font-semibold">Pago seguro</h3>
        <p class="mt-1 text-sm text-gray-600">Procesamos todos los pagos de forma segura con Stripe. Tus datos están protegidos.</p>
      </div>
    </div>
  </section>
</Base>

<script define:vars={{ isLoggedIn }}>
  // Función para manejar la suscripción
  async function handleSubscribe(plan, priceId) {
    try {
      const body = { plan };
      if (priceId) {
        body.priceId = priceId;
      }

      const response = await fetch('/api/pay/subscribe', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(body),
      });

      const data = await response.json();
      
      if (data.error) {
        alert('Error al procesar la suscripción. Por favor, inténtalo de nuevo.');
        return;
      }

      if (data.url) {
        window.location.href = data.url;
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error al conectar con el servidor. Por favor, inténtalo de nuevo.');
    }
  }

  // Añadir event listeners a los botones de suscripción
  document.querySelectorAll('.subscribe-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      // Verificar si el botón está deshabilitado
      if (e.target.disabled) {
        return;
      }
      
      if (!isLoggedIn) {
        window.location.href = '/login?redirect=/precios';
        return;
      }

      const plan = e.target.dataset.plan;
      const priceId = e.target.dataset.priceId;
      handleSubscribe(plan, priceId);
    });
  });
</script>
