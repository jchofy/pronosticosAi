---
import { getSession } from 'auth-astro/server';
import Base from '../layouts/Base.astro';

const session = await getSession(Astro.request);

// Si ya está logueado, redirigir
if (session) {
  return Astro.redirect('/');
}
---

<Base title="Iniciar Sesión - PronosticosAI">
  <!-- Login Section -->
  <section class="mb-10 md:mb-14">
    <div class="flex items-center justify-center py-8">
      <div class="w-full max-w-md">
        <!-- Main Card -->
        <div class="card p-8 relative overflow-hidden">
          <!-- Background decoration -->
          <div class="pointer-events-none absolute -right-16 -top-16 h-32 w-32 rounded-full bg-brand-100 opacity-40 blur-3xl"></div>
          <div class="pointer-events-none absolute -left-10 -bottom-12 h-32 w-32 rounded-full bg-blue-100 opacity-40 blur-3xl"></div>
          
          <!-- Header -->
          <div class="text-center mb-6 relative">
            <div class="inline-flex items-center gap-2 rounded-full bg-brand-50 px-3 py-1 text-[11px] font-semibold text-brand-800 border border-brand-100 mb-4">Acceso de usuario</div>
            <h1 class="text-2xl md:text-3xl font-extrabold tracking-tight">
              <span class="text-gradient-brand">Iniciar sesión en tu cuenta</span>
            </h1>
          </div>

          <!-- Login con Google -->
          <div class="relative mb-6">
            <button 
              onclick="signIn('google')"
              class="w-full flex justify-center items-center gap-3 py-3 px-4 text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors shadow-sm"
            >
              <svg class="w-5 h-5" viewBox="0 0 24 24">
                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Continuar con Google
            </button>
          </div>

          <!-- Divider -->
          <div class="relative mb-6">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-200" />
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-3 bg-white text-gray-500">O continúa con</span>
            </div>
          </div>

          <!-- Formulario de login -->
          <form id="loginForm" class="space-y-4 relative">
            <div class="space-y-4">
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input 
                  id="email" 
                  name="email" 
                  type="email" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-brand-500 transition-colors" 
                  placeholder="tu@ejemplo.com"
                />
                <div id="email-error" class="text-red-500 text-xs mt-1 hidden"></div>
              </div>
              <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
                <input 
                  id="password" 
                  name="password" 
                  type="password" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-brand-500 transition-colors" 
                  placeholder="Tu contraseña"
                />
                <div id="password-error" class="text-red-500 text-xs mt-1 hidden"></div>
              </div>
            </div>

            <div class="mt-6">
              <button 
                type="submit" 
                class="btn-primary w-full justify-center"
              >
                Iniciar sesión
              </button>
            </div>
      </form>

          <!-- Formulario de registro (oculto por defecto) -->
          <form id="registerForm" class="space-y-4 relative hidden">
            <div class="space-y-4">
              <div>
                <label for="reg-name" class="block text-sm font-medium text-gray-700 mb-1">Nombre completo</label>
                <input 
                  id="reg-name" 
                  name="name" 
                  type="text" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-brand-500 transition-colors" 
                  placeholder="Tu nombre completo"
                />
                <div id="reg-name-error" class="text-red-500 text-xs mt-1 hidden"></div>
              </div>
              <div>
                <label for="reg-email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input 
                  id="reg-email" 
                  name="email" 
                  type="email" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-brand-500 transition-colors" 
                  placeholder="tu@ejemplo.com"
                />
                <div id="reg-email-error" class="text-red-500 text-xs mt-1 hidden"></div>
              </div>
              <div>
                <label for="reg-password" class="block text-sm font-medium text-gray-700 mb-1">Contraseña</label>
                <input 
                  id="reg-password" 
                  name="password" 
                  type="password" 
                  required 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-brand-500 transition-colors" 
                  placeholder="Mínimo 8 caracteres"
                />
                <div id="reg-password-error" class="text-red-500 text-xs mt-1 hidden"></div>
                <div id="password-requirements" class="text-xs text-gray-500 mt-1">
                  La contraseña debe tener:
                  <ul class="ml-4 mt-1">
                    <li id="req-length" class="text-red-500">• Mínimo 8 caracteres</li>
                    <li id="req-uppercase" class="text-red-500">• Al menos 1 mayúscula</li>
                    <li id="req-lowercase" class="text-red-500">• Al menos 1 minúscula</li>
                    <li id="req-number" class="text-red-500">• Al menos 1 número</li>
                  </ul>
                </div>
              </div>
            </div>

            <div class="mt-6">
              <button 
                type="submit" 
                class="w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition-colors shadow-sm"
              >
                Crear cuenta
              </button>
            </div>
          </form>

          <!-- Botón para alternar entre login y registro -->
          <div class="text-center mt-6 relative">
            <p id="toggle-text" class="text-sm text-gray-600">
              <!-- El contenido se actualiza dinámicamente con JavaScript -->
            </p>
          </div>

          <!-- Messages -->
          <div id="message" class="mt-4 text-center text-sm hidden"></div>
        </div>
      </div>
    </div>
  </section>
</Base>

<script>
  import { signIn } from 'auth-astro/client';
  
  window.signIn = signIn;

  let isLoginMode = true;

  // Utility functions for validation
  function validateEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  function validatePassword(password) {
    return {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
      isValid: password.length >= 8 && /[A-Z]/.test(password) && /[a-z]/.test(password) && /\d/.test(password)
    };
  }

  function showFieldError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    field.classList.add('border-red-500');
    field.classList.remove('border-gray-300');
    errorDiv.textContent = message;
    errorDiv.classList.remove('hidden');
  }

  function clearFieldError(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    field.classList.remove('border-red-500');
    field.classList.add('border-gray-300');
    errorDiv.classList.add('hidden');
  }

  function clearAllErrors() {
    const errorFields = ['email', 'password', 'reg-name', 'reg-email', 'reg-password'];
    errorFields.forEach(clearFieldError);
  }

  function updateToggleText() {
    const toggleText = document.getElementById('toggle-text');
    
    if (isLoginMode) {
      toggleText.innerHTML = '¿No tienes cuenta? <button onclick="toggleForm()" class="font-medium text-brand-600 hover:text-brand-700 transition-colors">Crear cuenta</button>';
    } else {
      toggleText.innerHTML = '¿Ya tienes cuenta? <button onclick="toggleForm()" class="font-medium text-brand-600 hover:text-brand-700 transition-colors">Iniciar sesión</button>';
    }
  }

  function toggleForm() {
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const title = document.querySelector('h1'); // Cambio de h2 a h1
    const toggleText = document.getElementById('toggle-text');

    if (isLoginMode) {
      // Cambiar a modo registro
      loginForm.classList.add('hidden');
      registerForm.classList.remove('hidden');
      title.innerHTML = '<span class="text-gradient-brand">Crear una cuenta nueva</span>';
      isLoginMode = false;
    } else {
      // Cambiar a modo login
      registerForm.classList.add('hidden');
      loginForm.classList.remove('hidden');
      title.innerHTML = '<span class="text-gradient-brand">Iniciar sesión en tu cuenta</span>';
      isLoginMode = true;
    }
    updateToggleText();
  }

  function showMessage(text, isError = false) {
    const messageEl = document.getElementById('message');
    messageEl.textContent = text;
    messageEl.className = `mt-4 text-center text-sm ${isError ? 'text-red-600' : 'text-green-600'}`;
    messageEl.classList.remove('hidden');
  }

  // Login form handler
  document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    clearAllErrors();
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const password = formData.get('password');

    // Client-side validation
    let hasErrors = false;

    if (!email) {
      showFieldError('email', 'El email es obligatorio');
      hasErrors = true;
    } else if (!validateEmail(email)) {
      showFieldError('email', 'Por favor, ingresa un email válido');
      hasErrors = true;
    }

    if (!password) {
      showFieldError('password', 'La contraseña es obligatoria');
      hasErrors = true;
    }

    if (hasErrors) {
      showMessage('Por favor, corrige los errores antes de continuar', true);
      return;
    }

    try {
      const result = await signIn('credentials', { 
        email, 
        password,
        redirect: false 
      });
      
      if (result instanceof Response) {
        const callbackUrl = result.url;
        await new Promise(resolve => setTimeout(resolve, 100));
        const currentUrl = window.location.href;
        
        if (currentUrl.includes('error=') || currentUrl.includes('?error') || callbackUrl.includes('error=')) {
          showMessage('Email o contraseña incorrectos. Verifica tus datos e inténtalo de nuevo.', true);
        } else if (result.ok && result.status === 200) {
          setTimeout(() => {
            const isLoggedIn = document.cookie.includes('next-auth.session-token') || 
                             document.cookie.includes('__Secure-next-auth.session-token');
            
            if (isLoggedIn) {
              showMessage('¡Inicio de sesión exitoso! Redirigiendo...', false);
              window.location.href = '/';
            } else {
              showMessage('Email o contraseña incorrectos. Verifica tus datos e inténtalo de nuevo.', true);
            }
          }, 500);
        } else {
          showMessage('Error al iniciar sesión. Inténtalo de nuevo.', true);
        }
      } else if (result?.error) {
        if (result.error === 'CredentialsSignin') {
          showMessage('Email o contraseña incorrectos. Verifica tus datos e inténtalo de nuevo.', true);
        } else {
          showMessage('Error al iniciar sesión. Inténtalo de nuevo.', true);
        }
      } else {
        showMessage('¡Inicio de sesión exitoso! Redirigiendo...', false);
        window.location.href = '/';
      }
    } catch (error) {
      showMessage('Error al conectar con el servidor. Inténtalo más tarde.', true);
    }
  });

  // Register form handler
  document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    clearAllErrors();
    
    const formData = new FormData(e.target);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      password: formData.get('password')
    };

    // Client-side validation
    let hasErrors = false;

    if (!data.name || data.name.trim().length < 2) {
      showFieldError('reg-name', 'El nombre debe tener al menos 2 caracteres');
      hasErrors = true;
    }

    if (!data.email) {
      showFieldError('reg-email', 'El email es obligatorio');
      hasErrors = true;
    } else if (!validateEmail(data.email)) {
      showFieldError('reg-email', 'Por favor, ingresa un email válido');
      hasErrors = true;
    }

    const passwordValidation = validatePassword(data.password);
    if (!passwordValidation.isValid) {
      showFieldError('reg-password', 'La contraseña no cumple con los requisitos mínimos');
      hasErrors = true;
    }

    if (hasErrors) {
      showMessage('Por favor, corrige los errores antes de continuar', true);
      return;
    }

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (response.ok) {
        showMessage('¡Cuenta creada exitosamente! Iniciando sesión...', false);
        // Auto-login after registration
        setTimeout(async () => {
          await signIn('credentials', { 
            email: data.email, 
            password: data.password,
            redirect: false 
          });
          window.location.href = '/';
        }, 1500);
      } else {
        const errorMessages = {
          'email_already_exists': 'Este email ya está registrado. ¿Quieres iniciar sesión?',
          'password_too_short': 'La contraseña debe tener al menos 8 caracteres',
          'password_missing_uppercase': 'La contraseña debe incluir al menos una letra mayúscula',
          'password_missing_lowercase': 'La contraseña debe incluir al menos una letra minúscula',
          'password_missing_number': 'La contraseña debe incluir al menos un número',
          'name_too_short': 'El nombre debe tener al menos 2 caracteres',
          'invalid_email': 'El formato del email no es válido',
          'missing_fields': 'Todos los campos son obligatorios'
        };
        showMessage(errorMessages[result.error] || 'Error al crear la cuenta. Inténtalo de nuevo.', true);
      }
    } catch (error) {
      showMessage('Error al conectar con el servidor. Inténtalo más tarde.', true);
    }
  });

  // Real-time password validation for registration
  function setupPasswordValidation() {
    const regPasswordField = document.getElementById('reg-password');
    
    if (regPasswordField) {
      regPasswordField.addEventListener('input', function() {
        const password = this.value;
        const validation = validatePassword(password);
        
        // Update requirement indicators
        const reqLength = document.getElementById('req-length');
        const reqUppercase = document.getElementById('req-uppercase');
        const reqLowercase = document.getElementById('req-lowercase');
        const reqNumber = document.getElementById('req-number');
        
        // Update colors based on validation
        reqLength.className = validation.length ? 'text-green-500' : 'text-red-500';
        reqUppercase.className = validation.uppercase ? 'text-green-500' : 'text-red-500';
        reqLowercase.className = validation.lowercase ? 'text-green-500' : 'text-red-500';
        reqNumber.className = validation.number ? 'text-green-500' : 'text-red-500';
        
        // Clear field error if password becomes valid
        if (validation.isValid) {
          clearFieldError('reg-password');
        }
      });
    }
  }

  window.toggleForm = toggleForm;

  // Initialize the correct toggle text on page load
  function initializeToggleText() {
    updateToggleText();
    setupPasswordValidation();
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeToggleText);
  } else {
    setTimeout(initializeToggleText, 100); // Small delay to ensure elements are ready
  }
</script>
