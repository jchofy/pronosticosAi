---
// @ts-nocheck
import Base from '../layouts/Base.astro';
import { getSession } from 'auth-astro/server';
import { query } from '../lib/db.js';
import { formatPrice } from '../lib/stripe-products.js';
import { stripe } from '../lib/stripe.js';
import { metaBasic } from '../lib/seo.js';
import { SITE_URL } from '../lib/env.js';
import UsageLimits from '../components/UsageLimits.astro';

// Verificar autenticación
const session = await getSession(Astro.request);
if (!session?.user?.email) {
  return Astro.redirect('/login?redirect=/cuenta');
}

// Obtener usuario de la base de datos
const users = await query(
  'SELECT id, name, email, stripe_customer_id FROM users WHERE email = ? LIMIT 1',
  [session.user.email]
);

if (!users.length) {
  return Astro.redirect('/login');
}

const user = users[0];

// Obtener suscripciones activas
const subscriptions = await query(`
  SELECT 
    id,
    stripe_subscription_id,
    status,
    current_period_end,
    created_at
  FROM payments 
  WHERE user_id = ? 
    AND type = 'subscription'
    AND status IN ('active', 'canceled')
  ORDER BY created_at DESC
`, [user.id]);

// Obtener compras de partidos con nombres de equipos
const matchPurchases = await query(`
  SELECT 
    p.id,
    p.match_id,
    p.status,
    p.created_at,
    m.date,
    m.slug,
    ht.name as home_team_name,
    at.name as away_team_name
  FROM payments p
  LEFT JOIN matches m ON p.match_id = m.id
  LEFT JOIN teams ht ON m.home_team_id = ht.id
  LEFT JOIN teams at ON m.away_team_id = at.id
  WHERE p.user_id = ? 
    AND p.type = 'match'
    AND p.status = 'active'
  ORDER BY p.created_at DESC
  LIMIT 10
`, [user.id]);

// Enriquecer datos de suscripciones con información de Stripe
let enrichedSubscriptions = [];
for (const sub of subscriptions) {
  try {
    if (sub.stripe_subscription_id) {
      const stripeSub = await stripe.subscriptions.retrieve(sub.stripe_subscription_id, {
        expand: ['items.data.price.product']
      });
      
      const priceData = stripeSub.items.data[0]?.price;
      const productData = priceData?.product;
      
      enrichedSubscriptions.push({
        ...sub,
        stripe_data: stripeSub,
        product_name: productData?.name || 'Suscripción',
        price_amount: priceData?.unit_amount || 0,
        price_currency: priceData?.currency || 'eur',
        price_interval: priceData?.recurring?.interval || 'month',
        cancel_at_period_end: stripeSub.cancel_at_period_end,
        canceled_at: stripeSub.canceled_at
      });
    }
  } catch (error) {
    console.error('Error fetching subscription details:', error);
    enrichedSubscriptions.push({
      ...sub,
      product_name: 'Suscripción',
      price_amount: 0,
      price_currency: 'eur',
      price_interval: 'month'
    });
  }
}

const meta = metaBasic(
  'Mi Cuenta - PronosticosAI',
  'Gestiona tus suscripciones y consulta tu historial de compras',
  `${SITE_URL}/cuenta`
);

// Obtener parámetros de URL para mostrar mensajes
const url = new URL(Astro.request.url);
const checkout = url.searchParams.get('checkout');
const payment = url.searchParams.get('payment');
---

<Base {meta}>
  <div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Mensajes de estado -->
    {checkout === 'success' && (
      <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          <p class="text-green-800 font-medium">¡Pago procesado correctamente!</p>
        </div>
      </div>
    )}

    {checkout === 'canceled' && (
      <div class="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
        <div class="flex items-center">
          <svg class="w-5 h-5 text-yellow-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
          </svg>
          <p class="text-yellow-800 font-medium">Pago cancelado. Puedes intentarlo de nuevo cuando quieras.</p>
        </div>
      </div>
    )}

    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Mi Cuenta</h1>
      <p class="text-gray-600">Gestiona tus suscripciones y consulta tu historial</p>
    </div>

    <!-- Usage Limits -->
    <UsageLimits />

    <!-- Información del usuario -->
    <div class="bg-white rounded-lg shadow-sm border p-6 mb-8">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Información Personal</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="text-sm font-medium text-gray-700">Nombre</label>
          <p class="text-gray-900">{user.name || 'No especificado'}</p>
        </div>
        <div>
          <label class="text-sm font-medium text-gray-700">Email</label>
          <p class="text-gray-900">{user.email}</p>
        </div>
      </div>
    </div>

    <!-- Suscripciones activas -->
    <div class="bg-white rounded-lg shadow-sm border p-6 mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-semibold text-gray-900">Suscripciones</h2>
        <a 
          href="/precios" 
          class="text-sm bg-brand-600 text-white px-4 py-2 rounded-lg hover:bg-brand-700 transition-colors"
        >
          Ver Planes
        </a>
      </div>

      {enrichedSubscriptions.length === 0 ? (
        <div class="text-center py-8">
          <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          <p class="text-gray-600 mb-4">No tienes ninguna suscripción activa</p>
          <a 
            href="/precios" 
            class="inline-flex items-center px-4 py-2 bg-brand-600 text-white rounded-lg hover:bg-brand-700 transition-colors"
          >
            Explorar Planes
          </a>
        </div>
      ) : (
        <div class="space-y-4">
          {enrichedSubscriptions.map((subscription) => {
            const isActive = subscription.status === 'active';
            const isCanceled = subscription.cancel_at_period_end;
            const currentPeriodEnd = new Date(subscription.current_period_end);
            const isExpired = currentPeriodEnd < new Date();
            
            return (
              <div class={`border rounded-lg p-4 ${isActive && !isCanceled ? 'border-green-200 bg-green-50' : 'border-gray-200'}`}>
                <div class="flex items-center justify-between">
                  <div class="flex-1">
                    <div class="flex items-center gap-3 mb-2">
                      <h3 class="font-semibold text-gray-900">{subscription.product_name}</h3>
                      <span class={`px-2 py-1 text-xs rounded-full font-medium ${
                        isActive && !isCanceled 
                          ? 'bg-green-100 text-green-800' 
                          : isCanceled 
                          ? 'bg-yellow-100 text-yellow-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {isActive && !isCanceled ? 'Activa' : isCanceled ? 'Se cancela' : 'Inactiva'}
                      </span>
                    </div>
                    
                    <p class="text-sm text-gray-600 mb-1">
                      {formatPrice(subscription.price_amount, subscription.price_currency)} / {subscription.price_interval === 'month' ? 'mes' : 'año'}
                    </p>
                    
                    <p class="text-sm text-gray-500">
                      {isCanceled 
                        ? `Se cancela el ${currentPeriodEnd.toLocaleDateString('es-ES')}`
                        : `Próxima renovación: ${currentPeriodEnd.toLocaleDateString('es-ES')}`
                      }
                    </p>
                  </div>
                  
                  {isActive && (
                    <div class="flex gap-2">
                      {!isCanceled ? (
                        <button 
                          onclick={`cancelSubscription('${subscription.stripe_subscription_id}')`}
                          class="px-3 py-1 text-sm text-red-600 border border-red-200 rounded hover:bg-red-50 transition-colors"
                        >
                          Cancelar
                        </button>
                      ) : (
                        <button 
                          onclick={`reactivateSubscription('${subscription.stripe_subscription_id}')`}
                          class="px-3 py-1 text-sm text-green-600 border border-green-200 rounded hover:bg-green-50 transition-colors"
                        >
                          Reactivar
                        </button>
                      )}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>

    <!-- Compras de partidos -->
    <div class="bg-white rounded-lg shadow-sm border p-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Partidos Comprados</h2>
      
      {matchPurchases.length === 0 ? (
        <div class="text-center py-8">
          <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
          <p class="text-gray-600">No has comprado ningún partido individual</p>
        </div>
      ) : (
        <div class="space-y-3">
          {matchPurchases.map((purchase) => (
            <div class="border border-gray-200 rounded-lg p-4">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <h3 class="font-medium text-gray-900">
                    {purchase.home_team_name || 'Equipo Local'} vs {purchase.away_team_name || 'Equipo Visitante'}
                  </h3>
                  <p class="text-sm text-gray-600">
                    {purchase.date ? new Date(purchase.date).toLocaleDateString('es-ES', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) : 'Fecha no disponible'}
                  </p>
                  <p class="text-xs text-gray-500 mt-1">
                    Comprado el {new Date(purchase.created_at).toLocaleDateString('es-ES')}
                  </p>
                </div>
                
                {purchase.slug && (
                  <a 
                    href={`/partido/${purchase.slug}`}
                    class="px-3 py-1 text-sm bg-brand-600 text-white rounded hover:bg-brand-700 transition-colors"
                  >
                    Ver Pronóstico
                  </a>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>
</Base>

<script>
  // Función para cancelar suscripción
  async function cancelSubscription(subscriptionId) {
    if (!confirm('¿Estás seguro de que quieres cancelar tu suscripción? Seguirás teniendo acceso hasta el final del período actual.')) {
      return;
    }

    try {
      const response = await fetch('/api/subscription/cancel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ subscriptionId }),
      });

      const data = await response.json();
      
      if (data.error) {
        alert('Error al cancelar la suscripción: ' + data.error);
        return;
      }

      // Recargar la página para mostrar el cambio
      window.location.reload();
    } catch (error) {
      console.error('Error:', error);
      alert('Error al cancelar la suscripción. Por favor, inténtalo de nuevo.');
    }
  }

  // Función para reactivar suscripción
  async function reactivateSubscription(subscriptionId) {
    if (!confirm('¿Quieres reactivar tu suscripción? Continuará renovándose automáticamente.')) {
      return;
    }

    try {
      const response = await fetch('/api/subscription/reactivate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ subscriptionId }),
      });

      const data = await response.json();
      
      if (data.error) {
        alert('Error al reactivar la suscripción: ' + data.error);
        return;
      }

      // Recargar la página para mostrar el cambio
      window.location.reload();
    } catch (error) {
      console.error('Error:', error);
      alert('Error al reactivar la suscripción. Por favor, inténtalo de nuevo.');
    }
  }

  // Hacer las funciones globales
  (window as any).cancelSubscription = cancelSubscription;
  (window as any).reactivateSubscription = reactivateSubscription;
</script>
