---
// @ts-nocheck
import Base from '../../layouts/Base.astro';
import { getMatchBySlug } from '../../lib/matches.js';
import { pageMetaForMatch } from '../../lib/seo.js';
import { SITE_URL } from '../../lib/env.js';
import { getActiveBettingHouses } from '../../lib/bettingHouses.js';

const { slug } = Astro.params;
/** @type {any} */
let match = null;
/** @type {Array<{ id:number; name:string; website_url:string; affiliate_code?: string|null; affiliate_url?: string|null; contact_email?: string|null; color:string; logo_file?: string|null; active?: number }>} */
let bettingHouses = [];

try {
  match = await getMatchBySlug(slug);
  if (!match) {
    throw new Response('Not found', { status: 404 });
  }
  bettingHouses = await getActiveBettingHouses();
} catch (e) {
  if (e instanceof Response && e.status === 404) throw e;
  Astro.response.status = 503;
}

const siteUrl = SITE_URL;
const meta = match ? pageMetaForMatch(match, siteUrl) : { title: 'Partido', description: '', canonical: `${siteUrl}/partido/${slug}` };

const now = new Date();
const matchDate = match ? new Date(match.date) : new Date();
const isPast = match ? matchDate < now : false;
const isOld = match ? matchDate < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) : false;

const fmtDateTime = (s) => new Date(s).toLocaleString('es-ES', { dateStyle: 'full', timeStyle: 'short' });
const fmtShort = (s) => {
  try {
    const d = new Date(s);
    const weekday = d.toLocaleDateString('es-ES', { weekday: 'long' });
    const day = d.toLocaleDateString('es-ES', { day: '2-digit', month: 'short' });
    const time = d.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });
    return `${weekday}, ${day} · ${time}`;
  } catch { return ''; }
};
const fmtCap = (n) => (n ? Number(n).toLocaleString('es-ES') : null);
const fmtDateEsShort = (s) => {
  try {
    const d = new Date(s);
    return String(d.toLocaleDateString('es-ES', { day: '2-digit', month: 'short', year: 'numeric' })).replace(/\.$/, '');
  } catch { return ''; }
};
const normalizeHexColor = (c) => {
  try {
    const s = String(c || '').trim();
    if (!s) return '#0b5cff';
    if (s.startsWith('#') && s.length === 7) return s;
    if (!s.startsWith('#') && s.length === 6) return `#${s}`;
    return '#0b5cff';
  } catch {
    return '#0b5cff';
  }
};
const getContrastTextClass = (hex) => {
  const h = normalizeHexColor(hex).slice(1);
  const r = parseInt(h.slice(0,2), 16);
  const g = parseInt(h.slice(2,4), 16);
  const b = parseInt(h.slice(4,6), 16);
  const luminance = (0.2126*r + 0.7152*g + 0.0722*b) / 255;
  return luminance > 0.6 ? 'text-gray-900' : 'text-white';
};
---
<Base title={meta.title} description={meta.description} canonical={meta.canonical} jsonLd={[meta.jsonLd, meta.paywallJsonLd]} og={meta.og} noindex={isOld}>
  {match ? (
    <article class="prose prose-sm max-w-none">
      <div class="mb-2 flex items-center justify-between text-xs text-gray-600">
        <div class="inline-flex items-center gap-1 text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 text-gray-400"><path d="M12 22a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm.75-10.44V7a.75.75 0 0 0-1.5 0v5a.75.75 0 0 0 .22.53l3 3a.75.75 0 1 0 1.06-1.06l-2.78-2.78z"/></svg>
          <span class="font-medium">{fmtShort(match.date)}</span>
        </div>
        <a href={`/liga/${match.league_slug}`} class="inline-flex items-center gap-2">
          {match.league_logo && <img src={`/${String(match.league_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`} alt={match.league_name} class="h-10 w-10 md:h-12 md:w-12 rounded-md bg-white object-contain p-1 shadow-sm" width="48" height="48" loading="lazy" decoding="async" />}
          <span class="hidden sm:inline text-gray-700 hover:underline">{match.league_name}</span>
        </a>
      </div>

      <header class="mb-6 ">
        <h1 class="text-xl md:text-2xl font-bold leading-snug tracking-tight text-gray-900 not-prose">
          Pronóstico con IA {match.home_team_name} vs {match.away_team_name} – análisis de valor y cuotas {match.matchday ? `(J${match.matchday}, ${fmtDateEsShort(match.date)})` : `(${fmtDateEsShort(match.date)})`}
        </h1>
        <hr class="my-4  mb-12 "/>
        <div class="mb-3 grid grid-cols-[1fr_auto_1fr] items-center gap-3 not-prose">
          <div class="flex flex-col items-center gap-2 min-w-0">
            {match.home_logo && <img src={`/${String(match.home_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`} alt={`Escudo ${match.home_team_name}`} title={match.home_team_name} class="h-12 w-12 team-logo" width="48" height="48" loading="lazy" decoding="async" />}
            <div class="font-extrabold leading-tight text-gray-900 text-center text-xl md:text-2xl">{match.home_team_name}</div>
          </div>
          <div class="text-center">
            <div class="inline-flex"><span class="badge badge-date">J{match.matchday ?? '—'}</span></div>
            <div class="mt-1 text-[11px] uppercase tracking-wide text-gray-400">vs</div>
          </div>
          <div class="flex flex-col items-center gap-2 min-w-0">
            {match.away_logo && <img src={`/${String(match.away_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`} alt={`Escudo ${match.away_team_name}`} title={match.away_team_name} class="h-12 w-12 team-logo" width="48" height="48" loading="lazy" decoding="async" />}
            <div class="font-extrabold leading-tight text-gray-900 text-center text-xl md:text-2xl">{match.away_team_name}</div>
          </div>
        </div>
        {match.stadium && (
          <p class="not-prose text-xs text-gray-500">{match.stadium}{match.stadium_capacity ? ` · ${fmtCap(match.stadium_capacity)} espectadores` : ''}</p>
        )}
      </header>

      <section class="not-prose card p-6 md:p-7 bg-white/80">
        <h2 class="text-xl md:text-2xl font-extrabold">Pronóstico</h2>
        <p class="mt-1 text-sm text-gray-700">1 pronóstico gratis al día. Pulsa para revelar la apuesta recomendada y el análisis.</p>
        <div class="mt-4">
          <button id="btn-view-prediction" class="btn-primary" data-match-id={match.id} data-home-name={String(match.home_team_name || match.home_team || '')} data-away-name={String(match.away_team_name || match.away_team || '')}>Ver pronóstico</button>
          <div id="free-hint" class="mt-2 text-xs text-gray-600 hidden">Te queda 1 gratis hoy</div>
        </div>
        <div id="prediction-container" class="mt-5 hidden">
          <div id="prediction-bets" class="hidden"></div>
          <div class="mt-5 paywall text-sm text-gray-900 whitespace-pre-line" id="prediction-text"></div>
        </div>
        <div id="prediction-error" class="mt-3 text-sm text-red-600 hidden" role="alert"></div>
        <div id="prediction-upsell" class="mt-4 hidden">
          <div class="rounded-xl border border-gray-200 p-3 bg-gray-50">
            <p class="text-sm text-gray-700">Este pronóstico es de pago. Puedes comprarlo por separado o suscribirte a un plan.</p>
            <div class="mt-3 flex flex-wrap gap-2">
              <a id="btn-buy-once" class="btn-primary btn-sm" href="#">Comprar este pronóstico</a>
              <a class="btn-secondary btn-sm" href="/suscribirme">Ver planes</a>
            </div>
          </div>
        </div>
        <script>
          (function(){
            /** @type {HTMLButtonElement|null} */
            const btn = document.getElementById('btn-view-prediction');
            /** @type {HTMLElement|null} */
            const outWrap = document.getElementById('prediction-container');
            /** @type {HTMLElement|null} */
            const out = document.getElementById('prediction-text');
            const betsEl = document.getElementById('prediction-bets');
            /** @type {HTMLElement|null} */
            const err = document.getElementById('prediction-error');
            /** @type {HTMLElement|null} */
            const upsell = document.getElementById('prediction-upsell');
            if (!btn) return;
            const matchIdAttr = btn.getAttribute('data-match-id');
            const matchId = matchIdAttr ? Number(matchIdAttr) : NaN;
            const teamHome = btn.getAttribute('data-home-name') || '';
            const teamAway = btn.getAttribute('data-away-name') || '';
            const setLoading = (v) => { v ? btn.setAttribute('aria-busy','true') : btn.removeAttribute('aria-busy'); try { (btn instanceof HTMLButtonElement) && (btn.disabled = Boolean(v)); } catch(_){} };
            const humanizeBet = (bet) => {
              const typeRaw = String(bet?.bet_type || '').toLowerCase();
              const selRaw = String(bet?.selection || '').toLowerCase();
              const normalize = (s) => s.replace(/\s+/g, '_').replace(/\./g, '_');
              const type = normalize(typeRaw);
              const sel = normalize(selRaw);
              if (type.includes('1x2') || type === '1x2') {
                if (['local','home','1'].includes(sel)) return { title: `${teamHome}`, subtitle: 'Mercado 1X2' };
                if (['visitante','away','2'].includes(sel)) return { title: `${teamAway}`, subtitle: 'Mercado 1X2' };
                if (['empate','x','draw'].includes(sel)) return { title: 'Empate', subtitle: 'Mercado 1X2' };
                return { title: 'Mercado 1X2', subtitle: bet?.selection || '' };
              }
              if (type.includes('ambos_anotan') || type.includes('btts')) {
                const si = ['si','sí','yes','y'].includes(sel);
                const no = ['no','n'].includes(sel);
                return { title: `Ambos anotan: ${si ? 'Sí' : (no ? 'No' : (bet?.selection || ''))}`, subtitle: 'Goles' };
              }
              const parseOverUnder = (s) => {
                const m = s.match(/(over|under)[ _]?(\d+)[ _]?(\d)/);
                if (m) { return { kind: m[1], value: `${m[2]}.${m[3]}` }; }
                const m2 = s.match(/(over|under)[ _]?(\d+(?:[\._]\d+)?)/);
                if (m2) { return { kind: m2[1], value: m2[2].replace('_','.') }; }
                return null;
              };
              if (type.includes('over_under') || type.includes('goles') || type.includes('over') || type.includes('under') || sel.startsWith('over_') || sel.startsWith('under_') || type.startsWith('over_') || type.startsWith('under_')) {
                const info = parseOverUnder(sel) || parseOverUnder(type);
                if (info) {
                  const txt = info.kind === 'over' ? `Más de ${info.value} goles` : `Menos de ${info.value} goles`;
                  return { title: txt, subtitle: 'Total de goles' };
                }
              }
              // Fallback
              const nice = (s) => s.replace(/_/g,' ').replace(/\b\w/g, c => c.toUpperCase());
              return { title: nice(String(bet?.bet_type || '-')), subtitle: nice(String(bet?.selection || '')) };
            };

            const renderBetCard = (b) => {
              const h = humanizeBet(b);
              const odds = (typeof b?.odds === 'number') ? b.odds.toFixed(2) : '-';
              return `
                <div class=\"bet-card bet-card-strong\">
                  <div class=\"min-w-0\">
                    <div class=\"text-sm font-semibold text-gray-900 truncate\">${h.title}</div>
                    <div class=\"text-xs text-gray-700 truncate\">${h.subtitle}</div>
                  </div>
                  <div class=\"ml-3 bet-card-odds\">
                    <span class=\"odds-badge\">${odds}</span>
                  </div>
                </div>`;
            };
            const setHint = (n) => {
              const hint = document.getElementById('free-hint');
              if (!hint) return;
              const num = Number(n);
              if (Number.isFinite(num)) {
                hint.textContent = `Te queda ${num} gratis hoy`;
                hint.classList.remove('hidden');
              }
            };
            const updateFreeHint = async () => {
              try {
                const st = await fetch('/api/predictions/status', { credentials: 'include' }).then(r => r.json());
                if (Number(st?.free_remaining) >= 0) setHint(Number(st.free_remaining));
              } catch {}
            };
            updateFreeHint();

            const renderPrediction = (data) => {
              if (!data) return false;
              // bets first
              try {
                const bets = Array.isArray(data?.bets) ? data.bets : [];
                if (betsEl && bets.length) {
                  betsEl.classList.remove('hidden');
                  betsEl.innerHTML = '<div class="flex items-center justify-between mb-3">\
                      <h3 class="text-lg font-bold">Apuesta recomendada</h3>\
                    </div>' +
                    '<div class="grid grid-cols-1 sm:grid-cols-2 gap-3">' +
                    bets.map(renderBetCard).join('') + '</div>';
                }
              } catch {}
              if (out) out.textContent = data?.text || 'Pronóstico próximamente.';
              outWrap && outWrap.classList.remove('hidden');
              btn && btn.classList.add('hidden');
              // refresh hint after reveal (may drop to 0)
              updateFreeHint();
              return true;
            };

            // Auto-open if user already has access (subscription, purchase, or prior grant)
            (async () => {
              try {
                const resp = await fetch(`/api/predictions/${matchId}`, { credentials: 'include' });
                if (resp.ok) {
                  const data = await resp.json();
                  if (data && (data.text || (Array.isArray(data.bets) && data.bets.length))) {
                    renderPrediction(data);
                  }
                }
              } catch {}
            })();

            btn.addEventListener('click', async () => {
              setLoading(true);
              err && err.classList.add('hidden');
              upsell && upsell.classList.add('hidden');
              try {
                const acc = await fetch('/api/predictions/access', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  credentials: 'include',
                  body: JSON.stringify({ matchId })
                }).then(r => r.json());
                if (acc.status === 'granted') {
                  const data = await fetch(`/api/predictions/${matchId}`, { credentials: 'include' }).then(r => r.json());
                  renderPrediction(data);
                } else if (acc.status === 'payment_required') {
                  upsell && upsell.classList.remove('hidden');
                  if (err) {
                    if (acc.reason === 'daily_free_limit_reached') {
                      err.textContent = 'Has consumido tu pronóstico gratis de hoy.';
                      setHint(0);
                    } else {
                      err.textContent = 'No tienes acceso a este pronóstico. Suscríbete o compra este partido para verlo.';
                    }
                    err.classList.remove('hidden');
                  }
                } else {
                  // Si ya consumió gratis hoy, repetimos GET por si fue concedido en una sesión previa
                  try {
                    const data = await fetch(`/api/predictions/${matchId}`, { credentials: 'include' }).then(r => r.ok ? r.json() : null);
                    if (data && (data.text || (Array.isArray(data.bets) && data.bets.length))) {
                      const bets = Array.isArray(data?.bets) ? data.bets : [];
                      if (betsEl && bets.length) {
                        betsEl.classList.remove('hidden');
                        betsEl.innerHTML = '<div class="flex items-center justify-between mb-3">\
                            <h3 class="text-lg font-bold">Apuesta recomendada</h3>\
                          </div>' +
                          '<div class="grid grid-cols-1 sm:grid-cols-2 gap-3">' +
                          bets.map(renderBetCard).join('') + '</div>';
                      }
                      if (out) out.textContent = data?.text || 'Pronóstico próximamente.';
                      outWrap && outWrap.classList.remove('hidden');
                      btn.classList.add('hidden');
                      return;
                    }
                  } catch {}
                  if (err) { err.textContent = 'No tienes acceso a este pronóstico. Suscríbete o compra este partido para verlo.'; err.classList.remove('hidden'); }
                }
              } catch (e) {
                if (err) { err.textContent = 'No hemos podido comprobar tu acceso ahora mismo. Inténtalo de nuevo en unos segundos.'; err.classList.remove('hidden'); }
              } finally {
                setLoading(false);
              }
            });
          })();
        </script>
      </section>

      <section class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
        {/* Local team card */}
        <div class="card card-hover overflow-hidden">
          <div class="bg-gradient-to-r from-brand-50 to-white px-4 pt-4 pb-3 border-b border-gray-100">
            <div class="flex items-center gap-3">
              {match.home_logo && (
                <img
                  src={`/${String(match.home_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`}
                  alt={`Escudo ${match.home_team_name}`}
                  title={match.home_team_name}
                  class="h-12 w-12 rounded-lg bg-white object-contain p-1 border border-gray-200 shadow-sm"
                  width="48"
                  height="48"
                  loading="lazy"
                  decoding="async"
                />
              )}
              <div class="min-w-0">
                <div class="text-xs uppercase tracking-wide text-gray-500">Local</div>
                <h3 class="font-bold text-lg text-gray-900 truncate">{match.home_team_name}</h3>
              </div>
              <div class="ml-auto flex items-center gap-2">
                {match.league_logo && (
                  <img
                    src={`/${String(match.league_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`}
                    alt={match.league_name}
                    class="h-7 w-7 rounded-md bg-white object-contain p-1 border border-gray-200"
                    width="28"
                    height="28"
                    loading="lazy"
                    decoding="async"
                  />
                )}
                <span class="hidden sm:inline text-xs text-gray-600 truncate max-w-[120px]">{match.league_name}</span>
              </div>
            </div>
          </div>
          <div class="px-4 py-3">
            <dl class="space-y-2">
              {match.home_coach && (
                <div class="flex items-center gap-2 text-sm">
                  <svg class="h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12a5 5 0 1 0 0-10 5 5 0 0 0 0 10zm-7 9a7 7 0 0 1 14 0v1H5v-1z"/></svg>
                  <dt class="text-gray-500">Entrenador</dt>
                  <dd class="ml-auto font-medium text-gray-900 truncate">{match.home_coach}</dd>
                </div>
              )}
            </dl>
          </div>
        </div>

        {/* Away team card */}
        <div class="card card-hover overflow-hidden">
          <div class="bg-gradient-to-r from-white to-brand-50 px-4 pt-4 pb-3 border-b border-gray-100">
            <div class="flex items-center gap-3">
              {match.away_logo && (
                <img
                  src={`/${String(match.away_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`}
                  alt={`Escudo ${match.away_team_name}`}
                  title={match.away_team_name}
                  class="h-12 w-12 rounded-lg bg-white object-contain p-1 border border-gray-200 shadow-sm"
                  width="48"
                  height="48"
                  loading="lazy"
                  decoding="async"
                />
              )}
              <div class="min-w-0">
                <div class="text-xs uppercase tracking-wide text-gray-500">Visitante</div>
                <h3 class="font-bold text-lg text-gray-900 truncate">{match.away_team_name}</h3>
              </div>
              <div class="ml-auto flex items-center gap-2">
                {match.league_logo && (
                  <img
                    src={`/${String(match.league_logo).replace(/^\/?public\//,'').replace(/^\//,'')}`}
                    alt={match.league_name}
                    class="h-7 w-7 rounded-md bg-white object-contain p-1 border border-gray-200"
                    width="28"
                    height="28"
                    loading="lazy"
                    decoding="async"
                  />
                )}
                <span class="hidden sm:inline text-xs text-gray-600 truncate max-w-[120px]">{match.league_name}</span>
              </div>
            </div>
          </div>
          <div class="px-4 py-3">
            <dl class="space-y-2">
              {match.away_coach && (
                <div class="flex items-center gap-2 text-sm">
                  <svg class="h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M12 12a5 5 0 1 0 0-10 5 5 0 0 0 0 10zm-7 9a7 7 0 0 1 14 0v1H5v-1z"/></svg>
                  <dt class="text-gray-500">Entrenador</dt>
                  <dd class="ml-auto font-medium text-gray-900 truncate">{match.away_coach}</dd>
                </div>
              )}
            </dl>
          </div>
        </div>
      </section>

      {isPast && (
        <p class="text-xs text-gray-500 mt-4">Partido finalizado o en curso.</p>
      )}

      {bettingHouses && bettingHouses.length > 0 && (
        <section class="not-prose mt-8">
          <h2 class="text-lg font-bold mb-3">Casas recomendadas para tu depósito y bono</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {bettingHouses.map((bh) => {
              const color = normalizeHexColor(bh.color);
              const textClass = getContrastTextClass(color);
              const bgStyle = { backgroundColor: color };
              const link = bh.affiliate_url || bh.website_url;
              return (
                <a href={link} target="_blank" rel="nofollow noopener" class="block rounded-2xl overflow-hidden border border-gray-200 shadow-sm card-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-500" style={bgStyle}>
                  <div class={`p-4 flex items-center gap-3 ${textClass}`}>
                    {bh.logo_file && (
                      <img src={`/${String(bh.logo_file).replace(/^\/?public\//,'').replace(/^\//,'')}`} alt={`Logo ${bh.name}`} width="80" height="80" loading="lazy" decoding="async" class="h-16 w-16 sm:h-20 sm:w-20 object-contain" />
                    )}
                    <div class="min-w-0">
                      <div class="text-sm/5 opacity-90">Casa recomendada</div>
                      <div class="font-semibold text-base truncate">{bh.name}</div>
                    </div>
                    <div class="ml-auto">
                      <span class={`inline-flex items-center gap-1 rounded-full px-2.5 py-1 text-xs font-medium border ${textClass === 'text-white' ? 'border-white/50' : 'border-black/10'} ${textClass === 'text-white' ? 'text-white' : 'text-gray-900'} bg-black/10`}>Bono</span>
                    </div>
                  </div>
                  <div class={`px-4 pb-4 ${textClass}`}>
                    <p class="text-xs opacity-90">Deposita y reclama tu recompensa de bienvenida</p>
                  </div>
                </a>
              );
            })}
          </div>
          <p class="mt-2 text-[11px] text-gray-500">Enlaces de afiliado. Juega con responsabilidad.</p>
        </section>
      )}
    </article>
  ) : (
    <div class="card p-6 text-red-600">Service unavailable</div>
  )}
</Base> 