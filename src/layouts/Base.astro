---
// @ts-nocheck
import { SITE_URL } from '../lib/env.js';
import AuthMenu from '../components/AuthMenu.astro';
import QuickUsageStatus from '../components/QuickUsageStatus.astro';
import { ComplianceOverlays } from '../components/ComplianceOverlays.tsx';
import '../styles/tailwind.css';

// Server-side page tracking removed to prevent duplicates
// Client-side tracking will handle page visits more accurately
const {
  title = 'Pronósticos y Partidos',
  description = 'Partidos, resultados y pronósticos de fútbol con análisis y estadísticas.',
  canonical = undefined,
  noindex = false,
  jsonLd = null,
  og = {},
} = Astro.props;

const siteUrl = SITE_URL;
const canonicalUrl = canonical || `${siteUrl}${Astro.url.pathname}`;
const ogTitle = og.title || title;
const ogDescription = og.description || description;
const ogType = og.type || 'website';
const ogUrl = og.url || canonicalUrl;
const ogImage = og.image || `${siteUrl}/logoApp.webp`;

const path = Astro.url.pathname;
const isActive = (href) => path === href || path.startsWith(href + '/');
---
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/webp" href="/logoApp.webp" />
                <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <title>{title}</title>
    <meta name="description" content={description} />
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
    {noindex && <meta name="robots" content="noindex,follow" />}

    {/* Open Graph */}
    <meta property="og:title" content={ogTitle} />
    <meta property="og:description" content={ogDescription} />
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={ogUrl} />
    <meta property="og:image" content={ogImage} />

    {/* Twitter */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={ogTitle} />
    <meta name="twitter:description" content={ogDescription} />
    <meta name="twitter:image" content={ogImage} />

    {jsonLd && (Array.isArray(jsonLd)
      ? jsonLd.filter(Boolean).map((item) => (
          <script type="application/ld+json" set:html={JSON.stringify(item)} />
        ))
      : <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
    )}

                
    <style>
                  :root { --font-sans: ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; }
      body { font-family: var(--font-sans); }
    </style>
  </head>
  <body>
    <header class="sticky top-0 z-50 border-b border-gray-200 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60">
      <div class="mx-auto max-w-5xl px-4 py-3 flex items-center justify-between">
        <a href="/" class="flex items-center gap-3">
          <img src="/logoApp.webp" alt="PronosticosIA logo" class="h-9 w-9 rounded-xl object-cover" width="36" height="36" loading="eager" decoding="async" />
          <div class="leading-tight">
            <div class="font-extrabold text-lg text-gradient-brand">PronosticosIA</div>
            <div class="text-[11px] uppercase tracking-wider text-gray-500">Predicción y resultados</div>
          </div>
        </a>
        <nav class="hidden md:flex items-center gap-3 text-sm">
          <a class={`flex items-center gap-2 px-2 py-1 rounded-md transition-colors ${isActive('/') ? 'text-brand-700' : 'text-gray-700 hover:text-brand-700'}`} aria-current={isActive('/') ? 'page' : undefined} href="/">
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 12l9-9 9 9M4.5 10.5V21h5.25v-6h4.5v6H19.5V10.5"/></svg>
            <span>Home</span>
          </a>
          <a class={`flex items-center gap-2 px-2 py-1 rounded-md transition-colors ${isActive('/ligas') ? 'text-brand-700' : 'text-gray-700 hover:text-brand-700'}`} aria-current={isActive('/ligas') ? 'page' : undefined} href="/ligas">
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h7"/></svg>
            <span>Ligas</span>
          </a>
          <a class={`flex items-center gap-2 px-2 py-1 rounded-md transition-colors ${isActive('/proximos') ? 'text-brand-700' : 'text-gray-700 hover:text-brand-700'}`} aria-current={isActive('/proximos') ? 'page' : undefined} href="/proximos">
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6v6h4M12 2a10 10 0 100 20 10 10 0 000-20z"/></svg>
            <span>Próximos</span>
          </a>
          <a class={`flex items-center gap-2 px-2 py-1 rounded-md transition-colors ${isActive('/clasificacion') ? 'text-brand-700' : 'text-gray-700 hover:text-brand-700'}`} aria-current={isActive('/clasificacion') ? 'page' : undefined} href="/clasificacion">
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 13h4v8H3v-8zm7-4h4v12h-4V9zm7-6h4v18h-4V3z"/></svg>
            <span>Clasificación</span>
          </a>
          <a class={`flex items-center gap-2 px-2 py-1 rounded-md transition-colors ${isActive('/precios') ? 'text-brand-700' : 'text-gray-700 hover:text-brand-700'}`} aria-current={isActive('/precios') ? 'page' : undefined} href="/precios">
            <svg class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6V4a2 2 0 00-2-2H5a2 2 0 00-2 2v16l7-3 7 3V8a2 2 0 00-2-2h-3z"/></svg>
            <span>Precios</span>
          </a>
        </nav>
        
        <!-- Auth Menu para escritorio -->
        <div class="hidden md:block">
          <AuthMenu />
        </div>
        
        <button id="mobile-toggle" type="button" aria-controls="mobile-drawer" aria-expanded="false" data-mobile-toggle class="md:hidden inline-flex items-center justify-center rounded-lg border border-gray-300 bg-white p-2.5 text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500" aria-label="Abrir menú">
          <svg data-icon-hamburger xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-6 w-6"><path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
          <svg data-icon-close xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-6 w-6 hidden"><path d="M6 6l12 12M18 6L6 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
          <span class="sr-only">Abrir menú</span>
        </button>
      </div>
    </header>

    <!-- Mobile Drawer -->
    <div id="mobile-overlay" class="fixed inset-0 z-[60] bg-black/40 opacity-0 pointer-events-none transition-opacity duration-300 md:hidden" aria-hidden="true"></div>
    <aside id="mobile-drawer" class="fixed inset-y-0 left-0 z-[70] w-80 max-w-[88%] bg-white shadow-xl transform -translate-x-full transition-transform duration-300 md:hidden" role="dialog" aria-modal="true" aria-labelledby="mobile-drawer-title">
      <div class="p-4 flex items-center justify-between border-b">
        <div class="flex items-center gap-2">
          <img src="/logoApp.webp" alt="PronosticosIA logo" class="h-9 w-9 rounded-lg object-cover" width="36" height="36" loading="eager" decoding="async" />
          <span id="mobile-drawer-title" class="font-bold">PronosticosIA</span>
        </div>
        <button type="button" data-mobile-close aria-label="Cerrar menú" class="inline-flex items-center justify-center rounded-lg border border-gray-300 bg-white p-2.5 text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" class="h-6 w-6"><path d="M6 6l12 12M18 6L6 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
          <span class="sr-only">Cerrar menú</span>
        </button>
      </div>
      <nav class="p-3 space-y-2">
        <a class={`flex items-center gap-3 rounded-xl px-3 py-3 text-sm ${isActive('/') ? 'bg-brand-50 text-brand-800' : 'hover:bg-gray-50'} transition-colors`} aria-current={isActive('/') ? 'page' : undefined} href="/">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 12l9-9 9 9M4.5 10.5V21h5.25v-6h4.5v6H19.5V10.5"/></svg>
          Home
        </a>
        <a class={`flex items-center gap-3 rounded-xl px-3 py-3 text-sm ${isActive('/ligas') ? 'bg-brand-50 text-brand-800' : 'hover:bg-gray-50'} transition-colors`} aria-current={isActive('/ligas') ? 'page' : undefined} href="/ligas">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 6h16M4 12h16M4 18h7"/></svg>
          Ligas
        </a>
        <a class={`flex items-center gap-3 rounded-xl px-3 py-3 text-sm ${isActive('/proximos') ? 'bg-brand-50 text-brand-800' : 'hover:bg-gray-50'} transition-colors`} aria-current={isActive('/proximos') ? 'page' : undefined} href="/proximos">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6v6h4M12 2a10 10 0 100 20 10 10 0 000-20z"/></svg>
          Próximos
        </a>
        <a class={`flex items-center gap-3 rounded-xl px-3 py-3 text-sm ${isActive('/precios') ? 'bg-brand-50 text-brand-800' : 'hover:bg-gray-50'} transition-colors`} aria-current={isActive('/precios') ? 'page' : undefined} href="/precios">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 6V4a2 2 0 00-2-2H5a2 2 0 00-2 2v16l7-3 7 3V8a2 2 0 00-2-2h-3z"/></svg>
          Precios
        </a>
        <a class={`flex items-center gap-3 rounded-xl px-3 py-3 text-sm ${isActive('/clasificacion') ? 'bg-brand-50 text-brand-800' : 'hover:bg-gray-50'} transition-colors`} aria-current={isActive('/clasificacion') ? 'page' : undefined} href="/clasificacion">
          <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3 13h4v8H3v-8zm7-4h4v12h-4V9zm7-6h4v18h-4V3z"/></svg>
          Clasificación
        </a>
      </nav>
      
      <!-- Auth Menu para móvil -->
      <AuthMenu isMobile={true} />
      
      <!-- Quick Usage Status -->
      <QuickUsageStatus />
      
      <div class="mt-auto p-3 border-t text-xs text-gray-500">
        © {new Date().getFullYear()} PronosticosIA
      </div>
    </aside>

    <main id="app-main" class="mx-auto max-w-5xl px-4 py-6">
      <slot />
    </main>
    
    <!-- Componente React solo para los modales/banners -->
    <ComplianceOverlays client:idle />
    
    <footer id="app-footer" class="border-t border-gray-200 py-8">
      <div class="mx-auto max-w-5xl px-4">
        <!-- Enlaces principales -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6 mb-6">
          <div>
            <h3 class="font-semibold text-gray-900 mb-3">Navegación</h3>
            <ul class="space-y-2 text-sm text-gray-600">
              <li><a href="/" class="hover:text-gray-900 transition-colors">Inicio</a></li>
              <li><a href="/ligas" class="hover:text-gray-900 transition-colors">Ligas</a></li>
              <li><a href="/proximos" class="hover:text-gray-900 transition-colors">Próximos</a></li>
              <li><a href="/precios" class="hover:text-gray-900 transition-colors">Precios</a></li>
            </ul>
          </div>
          
          <div>
            <h3 class="font-semibold text-gray-900 mb-3">Legal</h3>
            <ul class="space-y-2 text-sm text-gray-600">
              <li><a href="/legal/terminos" class="hover:text-gray-900 transition-colors">Términos y Condiciones</a></li>
              <li><a href="/legal/privacidad" class="hover:text-gray-900 transition-colors">Política de Privacidad</a></li>
              <li><a href="/legal/cookies" class="hover:text-gray-900 transition-colors">Política de Cookies</a></li>
              <li><a href="/legal/aviso" class="hover:text-gray-900 transition-colors">Aviso Legal</a></li>
            </ul>
          </div>
          
          <div>
            <h3 class="font-semibold text-gray-900 mb-3">Juego Responsable</h3>
            <ul class="space-y-2 text-sm text-gray-600">
              <li>
                <span class="text-red-600 font-semibold">🔞 Solo +18</span>
              </li>
              <li>
                <a href="https://www.fejar.org" target="_blank" rel="noopener" class="hover:text-gray-900 transition-colors">
                  FEJAR - Ayuda
                </a>
              </li>
              <li>
                <a href="https://www.autoexclusion.es" target="_blank" rel="noopener" class="hover:text-gray-900 transition-colors">
                  Autoexclusión
                </a>
              </li>
            </ul>
          </div>
          
          <div>
            <h3 class="font-semibold text-gray-900 mb-3">Contacto</h3>
            <ul class="space-y-2 text-sm text-gray-600">
              <li>
                <a href="mailto:info@pronosticosai.com" class="hover:text-gray-900 transition-colors">
                  info@pronosticosai.com
                </a>
              </li>
              <li>
                <a href="/sitemap.xml" class="hover:text-gray-900 transition-colors">
                  Sitemap
                </a>
              </li>
            </ul>
          </div>
        </div>
        
        <!-- Disclaimer y Copyright -->
        <div class="border-t border-gray-200 pt-6">
          <div class="flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-gray-500">
            <div class="text-center md:text-left">
              <p class="mb-1">© {new Date().getFullYear()} PronosticosIA — Todos los derechos reservados</p>
              <p class="text-xs text-red-600 font-medium">
                🔞 Solo mayores de 18 años • Juegue con responsabilidad • Los pronósticos no garantizan resultados
              </p>
            </div>
            <div class="flex items-center gap-4 text-xs">
              <span class="bg-green-100 text-green-800 px-2 py-1 rounded">RGPD Compliant</span>
              <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded">SSL Seguro</span>
            </div>
          </div>
        </div>
      </div>
    </footer>

    <script>
      (() => {
        const init = () => {
        const openBtn = document.querySelector('[data-mobile-toggle]');
        const closeBtn = document.querySelector('[data-mobile-close]');
        const drawer = document.getElementById('mobile-drawer');
        const overlay = document.getElementById('mobile-overlay');
        const main = document.getElementById('app-main');
        const footer = document.getElementById('app-footer');
        /** @type {HTMLElement|null} */
        let lastFocus = /** @type {HTMLElement|null} */ (null);

        if (!openBtn || !drawer || !overlay) return;

        /** @returns {HTMLElement[]} */
        const getFocusable = () => Array.from(drawer.querySelectorAll('a, button, [tabindex]:not([tabindex="-1"])')).filter((el) => el instanceof HTMLElement);


        const setButtonIcons = (isOpen) => {
          const hb = document.querySelector('[data-icon-hamburger]');
          const cl = document.querySelector('[data-icon-close]');
          if (hb && cl) {
            if (isOpen) { hb.classList.add('hidden'); cl.classList.remove('hidden'); }
            else { hb.classList.remove('hidden'); cl.classList.add('hidden'); }
          }
        };

        const open = () => {
          // @ts-ignore
          lastFocus = (document.activeElement instanceof HTMLElement) ? document.activeElement : null;
          drawer.classList.remove('-translate-x-full');
          overlay.classList.remove('opacity-0', 'pointer-events-none');
          openBtn.setAttribute('aria-expanded', 'true');
          setButtonIcons(true);
          // Hide header toggle to avoid duplicate close buttons in view
          openBtn.classList.add('invisible');
          document.body.style.overflow = 'hidden';
          main && main.setAttribute('aria-hidden', 'true');
          footer && footer.setAttribute('aria-hidden', 'true');
          const focusables = /** @type {HTMLElement[]} */ (getFocusable());
          if (focusables.length) (focusables[0]).focus();
        };
        const close = () => {
          drawer.classList.add('-translate-x-full');
          overlay.classList.add('opacity-0', 'pointer-events-none');
          openBtn.setAttribute('aria-expanded', 'false');
          setButtonIcons(false);
          // Show header toggle again
          openBtn.classList.remove('invisible');
          document.body.style.overflow = '';
          main && main.removeAttribute('aria-hidden');
          footer && footer.removeAttribute('aria-hidden');
          try {
            // @ts-ignore
            if (lastFocus && typeof lastFocus.focus === 'function') { lastFocus.focus(); }
          } catch (_) {}
        };

        const trap = (e) => {
          if (e.key !== 'Tab') return;
          const focusables = /** @type {HTMLElement[]} */ (Array.from(getFocusable()));
          if (!focusables.length) return;
          const first = /** @type {HTMLElement} */ (focusables[0]);
          const last = /** @type {HTMLElement} */ (focusables[focusables.length - 1]);
          if (e.shiftKey && document.activeElement === first) {
            e.preventDefault();
            last.focus();
          } else if (!e.shiftKey && document.activeElement === last) {
            e.preventDefault();
            first.focus();
          }
        };

        openBtn.addEventListener('click', () => {
          const isOpen = !drawer.classList.contains('-translate-x-full');
          if (isOpen) close(); else open();
        });
        overlay.addEventListener('click', close);
        if (closeBtn) closeBtn.addEventListener('click', close);
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape') close(); });
        drawer.addEventListener('keydown', trap);
        };
        if ('requestIdleCallback' in window) {
          // @ts-ignore
          window.requestIdleCallback(init);
        } else {
          setTimeout(init, 0);
        }
      })();
    </script>
  <script>
    // @ts-nocheck
    // Listener global para actualizar indicadores de uso cuando se consumen créditos
    window.addEventListener('usageUpdated', function(event) {
      const detail = event.detail;
      console.log('📊 Usage updated:', detail);
      
      // El evento ya se maneja en PredictionAccess.astro, pero podemos agregar más lógica aquí si es necesario
      // Por ejemplo, actualizar otros elementos de la UI, mostrar notificaciones, etc.
    });
  </script>

  <script type="module">
    // @ts-nocheck
    // Activity Tracking - Client-side tracking initialization
    (() => {
      // Prevent multiple initializations
      if (window.__activityTrackerInitialized) {
        return;
      }
      window.__activityTrackerInitialized = true;

      // Global tracking state
      if (!window.__trackingState) {
        window.__trackingState = {
          lastPageVisit: 0,
          lastClickTime: 0,
          currentPath: null,
          pageStartTime: Date.now()
        };
      }

      const DEBOUNCE_TIME = 1500; // 1.5 seconds for page visits
      const CLICK_DEBOUNCE_TIME = 500; // 500ms for clicks

      // Get user ID from session if available
      const getCurrentUserId = () => {
        // Try to get user ID from a meta tag or global variable if available
        const userMeta = document.querySelector('meta[name="user-id"]');
        return userMeta ? userMeta.content : null;
      };

      // Track initial page visit when page loads
      const trackInitialPageVisit = async (userId) => {
        const currentPath = window.location.pathname;
        const now = Date.now();
        
        // Check if this page load is the result of a tracked navigation
        const navigationData = sessionStorage.getItem('__trackingNavigation');
        let skipDuplicateCheck = false;
        
        if (navigationData) {
          try {
            const navInfo = JSON.parse(navigationData);
            // If this is the destination page of a recent navigation, allow it
            if (navInfo.toPage === currentPath && (now - navInfo.timestamp) < 3000) {
              skipDuplicateCheck = true;
              // Clear the navigation data since we've used it
              sessionStorage.removeItem('__trackingNavigation');
            }
          } catch (e) {
            sessionStorage.removeItem('__trackingNavigation');
          }
        }
        
        // Skip if same page was tracked recently (unless this is a tracked navigation)
        if (!skipDuplicateCheck && 
            window.__trackingState.currentPath === currentPath && 
            now - window.__trackingState.lastPageVisit < DEBOUNCE_TIME) {
          return;
        }

        window.__trackingState.lastPageVisit = now;
        window.__trackingState.currentPath = currentPath;
        window.__trackingState.pageStartTime = now;

        try {
          await fetch('/api/track-activity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type: 'page_visit',
              page: currentPath,
              url: window.location.href,
              userId,
              title: document.title
            })
          });
        } catch (error) {
          console.error('Error tracking page visit:', error);
        }
      };

      // Initialize client-side tracking
      const initClientTracking = (userId = null) => {
        // Track initial page visit
        trackInitialPageVisit(userId);

        // Track page visibility changes (only for duration tracking)
        document.addEventListener('visibilitychange', () => {
          if (document.visibilityState === 'hidden') {
            trackClientPageExit(userId);
          }
        });

        // Track beforeunload (page exit)
        window.addEventListener('beforeunload', () => {
          trackClientPageExit(userId);
        });

        // Track clicks on important elements
        document.addEventListener('click', (event) => {
          trackClientClick(event, userId);
        });

        // Track form submissions
        document.addEventListener('submit', (event) => {
          trackClientFormSubmission(event, userId);
        });
      };

      // Track client-side button click (only for specific important actions)
      const trackClientClick = async (event, userId) => {
        try {
          const element = event.target.closest('button, a[href], [data-track]');
          if (!element) return;

          // Only track specific important buttons
          const shouldTrack = isImportantAction(element);
          if (!shouldTrack) {
            // Still handle navigation for page tracking, but don't send button click event
            handleNavigationTracking(element);
            return;
          }

          // Debounce rapid clicks
          const now = Date.now();
          if (now - window.__trackingState.lastClickTime < CLICK_DEBOUNCE_TIME) return;
          window.__trackingState.lastClickTime = now;

          // Handle navigation tracking
          handleNavigationTracking(element);

          const elementInfo = getElementInfo(element);
          
          await fetch('/api/track-activity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type: 'button_click',
              element: elementInfo,
              page: window.location.pathname,
              url: window.location.href,
              userId
            })
          });
        } catch (error) {
          console.error('Error tracking click:', error);
        }
      };

      // Check if the clicked element is an important action we want to track
      const isImportantAction = (element) => {
        const text = element.textContent?.trim().toLowerCase() || '';
        const classes = element.className || '';
        const href = element.href || '';
        const id = element.id || '';

        // Track Stripe/subscription buttons
        if (classes.includes('subscribe-btn') || 
            text.includes('suscribirse ahora') ||
            text.includes('suscribirse') ||
            text.includes('iniciar sesión para suscribirse') ||
            href.includes('stripe') ||
            href.includes('checkout')) {
          return true;
        }

        // Track purchase/payment buttons
        if (text.includes('comprar predicción') ||
            text.includes('comprar este partido') ||
            text.includes('comprar solo este') ||
            id === 'btn-buy-match' ||
            classes.includes('purchase-btn')) {
          return true;
        }

        // Track prediction access buttons (Ver pronóstico)
        if (text.includes('ver pronóstico') ||
            id === 'btn-view-prediction') {
          return true;
        }

        return false;
      };

      // Handle navigation tracking separately from button click tracking
      const handleNavigationTracking = (element) => {
        const isNavigationLink = element.tagName.toLowerCase() === 'a' && 
                                 element.href && 
                                 element.href !== window.location.href &&
                                 !element.href.startsWith('#') &&
                                 !element.target;

        if (isNavigationLink) {
          sessionStorage.setItem('__trackingNavigation', JSON.stringify({
            timestamp: Date.now(),
            fromPage: window.location.pathname,
            toPage: new URL(element.href).pathname,
            clicked: true
          }));
        }
      };

      // Track client-side form submission
      const trackClientFormSubmission = async (event, userId) => {
        try {
          const form = event.target;
          const formInfo = {
            id: form.id || 'unknown',
            action: form.action || window.location.href,
            method: form.method || 'GET'
          };

          await fetch('/api/track-activity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type: 'form_submission',
              element: `Form: ${formInfo.id}`,
              details: `${formInfo.method.toUpperCase()} ${formInfo.action}`,
              page: window.location.pathname,
              url: window.location.href,
              userId
            })
          });
        } catch (error) {
          console.error('Error tracking form submission:', error);
        }
      };

      // Track client-side page exit (duration only, no duplicate page visits)
      const trackClientPageExit = async (userId) => {
        try {
          // Use our page start time instead of performance.timing
          const duration = Date.now() - window.__trackingState.pageStartTime;
          
          // Only send if duration is meaningful (more than 2 seconds)
          if (duration < 2000) return;

          const data = JSON.stringify({
            type: 'page_duration',
            page: window.location.pathname,
            url: window.location.href,
            userId,
            duration
          });

          if (navigator.sendBeacon) {
            navigator.sendBeacon('/api/track-activity', data);
          }
        } catch (error) {
          console.error('Error tracking page exit:', error);
        }
      };

      // Get element information for tracking
      const getElementInfo = (element) => {
        const tag = element.tagName.toLowerCase();
        const id = element.id ? `#${element.id}` : '';
        const classes = element.className ? `.${element.className.split(' ').slice(0, 3).join('.')}` : '';
        const text = element.textContent?.trim().substring(0, 50) || '';
        const href = element.href || '';
        
        let info = tag + id + classes;
        if (text) info += ` "${text}"`;
        if (href && href !== window.location.href) info += ` -> ${href}`;
        
        return info;
      };

      // Manual client-side tracking function (available globally)
      window.trackActivity = async (type, data = {}) => {
        try {
          await fetch('/api/track-activity', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              type,
              page: window.location.pathname,
              url: window.location.href,
              userId: getCurrentUserId(),
              ...data
            })
          });
        } catch (error) {
          console.error('Error tracking activity:', error);
        }
      };

      // Handle SPA navigation (Astro View Transitions)
      const handleNavigation = () => {
        // Small delay to ensure new page is loaded
        setTimeout(() => {
          trackInitialPageVisit(getCurrentUserId());
        }, 100);
      };

      // Listen for Astro navigation events
      document.addEventListener('astro:page-load', handleNavigation);
      document.addEventListener('astro:after-swap', handleNavigation);

      // Initialize tracking when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          initClientTracking(getCurrentUserId());
        });
      } else {
        initClientTracking(getCurrentUserId());
      }
    })();
  </script>
  </body>
</html> 